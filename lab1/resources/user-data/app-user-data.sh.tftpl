#!/bin/bash
# This script should be run as root
set -e

# Install required package
yum install -y 389-ds-base nfs-utils sssd wget stress-ng

##########################################
# Join LDAP
##########################################

# Populate sssd config
cat > /etc/sssd/sssd.conf <<EOF
[domain/ldap]
debug_level=9

cache_credentials = True
id_provider = ldap
auth_provider = ldap
access_provider = ldap
chpass_provider = ldap
ldap_schema = rfc2307bis
ldap_search_base = dc=example,dc=com
ldap_uri = ldaps://${ ldap_server_dns_endpoint }

ldap_tls_reqcert = never

ldap_access_filter = (memberOf=cn=server_admins,ou=Groups,dc=example,dc=com)

enumerate = false
access_provider = ldap
ldap_user_member_of = memberof
ldap_user_gecos = cn
ldap_user_uuid = nsUniqueId
ldap_group_uuid = nsUniqueId
ldap_account_expire_policy = rhds
ldap_access_order = filter, expire
# Setup for ssh keys
# Inside /etc/ssh/sshd_config add the lines:
#   AuthorizedKeysCommand /usr/bin/sss_ssh_authorizedkeys
#   AuthorizedKeysCommandUser nobody
# You can test with the command: sss_ssh_authorizedkeys <username>
ldap_user_ssh_public_key = nsSshPublicKey
ignore_group_members = False

[sssd]
services = nss, pam, ssh, sudo
config_file_version = 2

domains = ldap
[nss]
homedir_substring = /home
EOF

chmod 600 /etc/sssd/sssd.conf
chown root:root /etc/sssd/sssd.conf

# Enable password login
echo "PasswordAuthentication yes" > /etc/ssh/sshd_config.d/50-cloud-init.conf

# Setup for ssh key
echo "AuthorizedKeysCommand /usr/bin/sss_ssh_authorizedkeys" >> /etc/ssh/sshd_config
echo "AuthorizedKeysCommandUser nobody" >> /etc/ssh/sshd_config

# Enable create home folder for LDAP user
authconfig --enablemkhomedir --update

# Start sssd & Restart sshd
systemctl start sssd
systemctl enable sssd
systemctl restart sshd

##########################################
# Install weather service
##########################################

# Setup source code directory
mkdir /opt/weather-report
cat > /opt/weather-report/get-weather-report.py <<EOF
#!/usr/bin/python
import requests
import time

# Get temperature of Hanoi via a proxy
def get_current_han_temp_via_proxy(endpoint, proxy):
    res = requests.get(WTTR_HAN_ENDPOINT, proxies=proxies)
    if res.ok:
        print("Hanoi current temperature is ", res.text)
    else:
        print("Some error happened, please try again")

# Squid proxy endpoint
SQUID_PROXY_ADDR = "${ squid_proxy_addr }"
# Hanoi weather report endpoint
WTTR_HAN_ENDPOINT = "https://wttr.in/hanoi?format=%t"
# Wait 300 seconds (5 min) between queries
QUERY_DELAY_TIME = 300

# Use same proxy for every scheme
proxies = {
    "http": SQUID_PROXY_ADDR,
    "https": SQUID_PROXY_ADDR
}

while True:
    get_current_han_temp_via_proxy(WTTR_HAN_ENDPOINT, SQUID_PROXY_ADDR)
    time.sleep(QUERY_DELAY_TIME)
EOF
# Give run permission for the python script
chmod +x /opt/weather-report/get-weather-report.py

# Create systemd service file
cat > /etc/systemd/system/weather-report.service <<EOF
[Unit]
Description=Report weather in Hanoi
After=multi-user.target

[Service]
Type=simple
Restart=always
User=root
ExecStart=/usr/bin/python3 /opt/weather-report/get-weather-report.py
# Delay 20s to ensure proxy started properly
ExecStartPre=/bin/sleep 20
# Fix Stdout to log
Environment=PYTHONUNBUFFERED=1

[Install]
WantedBy=multi-user.target
EOF

# Enable and run the service
systemctl daemon-reload
systemctl enable weather-report
systemctl start weather-report

##########################################
# Setup Cloudwatch agent
##########################################

# Install CloudWatch Agent
wget https://amazoncloudwatch-agent.s3.amazonaws.com/redhat/amd64/latest/amazon-cloudwatch-agent.rpm
rpm -U ./amazon-cloudwatch-agent.rpm
rm amazon-cloudwatch-agent.rpm

# Setup Cloudwatch agent
cat > /opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json <<EOF
{
  "agent": {
    "metrics_collection_interval": 10,
    "run_as_user": "root"
  },
  "metrics": {
    "metrics_collected": {
      "cpu": {
        "measurement": [
          "cpu_usage_idle",
          "cpu_usage_iowait",
          "cpu_usage_user",
          "cpu_usage_system"
        ],
        "metrics_collection_interval": 10,
        "totalcpu": false
      },
      "diskio": {
        "measurement": [
          "io_time",
          "write_bytes",
          "read_bytes",
          "writes",
          "reads"
        ],
        "metrics_collection_interval": 10,
        "resources": [
          "*"
        ]
      },
      "mem": {
        "measurement": [
          "mem_used_percent"
        ],
        "metrics_collection_interval": 10
      }
    }
  }
}
EOF

# Parse config and enable Cloudwatch Agent
/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json
